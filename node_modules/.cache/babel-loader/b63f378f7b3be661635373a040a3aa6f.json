{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/123/Documents/Easynet/argon-dashboard/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/123/Documents/Easynet/argon-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/123/Documents/Easynet/argon-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\123\\\\Documents\\\\Easynet\\\\argon-dashboard\\\\src\\\\views\\\\Maps.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, InfoWindow, Marker } from \"@react-google-maps/api\"; // core components\n\nimport Header from \"components/Headers/Header.js\";\nimport { endpoints } from \"../api-endpoints\"; // reactstrap components\n\nimport { Card, Container, Row } from \"reactstrap\"; // core components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar MapWrapper = function MapWrapper() {\n  _s();\n\n  var mapRef = React.useRef(null);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      drivers = _useState2[0],\n      setDrivers = _useState2[1];\n\n  var markers = [];\n  useEffect(function () {\n    function fetchUsers() {\n      return _fetchUsers.apply(this, arguments);\n    }\n\n    function _fetchUsers() {\n      _fetchUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fullResponse, responseJson;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(endpoints.getDrivers);\n\n              case 2:\n                fullResponse = _context.sent;\n                _context.next = 5;\n                return fullResponse.json();\n\n              case 5:\n                responseJson = _context.sent;\n                setDrivers(responseJson.users);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchUsers.apply(this, arguments);\n    }\n\n    fetchUsers();\n  }, []);\n  drivers.forEach(function (user) {\n    marker.push({\n      id: user.address.lat,\n      name: \"Qevla Driver new one\",\n      position: user.address\n    });\n  });\n  console.log(\"Created drivers>>>>>>> from headers from map markers used\", markers); // React.useEffect(() => {\n\n  var google = window.google;\n  var map = mapRef.current;\n  var lat = \"40.748817\";\n  var lng = \"-73.985428\";\n  var myLatlng = new google.maps.LatLng(lat, lng);\n  var mapOptions = {\n    zoom: 12,\n    center: myLatlng,\n    scrollwheel: false,\n    zoomControl: true,\n    styles: [{\n      featureType: \"administrative\",\n      elementType: \"labels.text.fill\",\n      stylers: [{\n        color: \"#444444\"\n      }]\n    }, {\n      featureType: \"landscape\",\n      elementType: \"all\",\n      stylers: [{\n        color: \"#f2f2f2\"\n      }]\n    }, {\n      featureType: \"poi\",\n      elementType: \"all\",\n      stylers: [{\n        visibility: \"off\"\n      }]\n    }, {\n      featureType: \"road\",\n      elementType: \"all\",\n      stylers: [{\n        saturation: -100\n      }, {\n        lightness: 45\n      }]\n    }, {\n      featureType: \"road.highway\",\n      elementType: \"all\",\n      stylers: [{\n        visibility: \"simplified\"\n      }]\n    }, {\n      featureType: \"road.arterial\",\n      elementType: \"labels.icon\",\n      stylers: [{\n        visibility: \"off\"\n      }]\n    }, {\n      featureType: \"transit\",\n      elementType: \"all\",\n      stylers: [{\n        visibility: \"off\"\n      }]\n    }, {\n      featureType: \"water\",\n      elementType: \"all\",\n      stylers: [{\n        color: \"#5e72e4\"\n      }, {\n        visibility: \"on\"\n      }]\n    }]\n  }; // async function fetchUsers() {\n  //   const fullResponse = await fetch(endpoints.getDrivers);\n  //   const responseJson = await fullResponse.json();\n  //   setDrivers(responseJson.users);\n  // }\n  // fetchUsers();\n  //     const markers = [];\n  //  drivers.forEach((user) => {\n  //    marker.push({\n  //      id: user.address.lat,\n  //      name: \"Qevla Driver new one\",\n  //      position: user.address,\n  //    });\n  //  });\n\n  map = new google.maps.Map(map, mapOptions);\n  var marker = new google.maps.Marker({\n    position: markers.address,\n    map: map,\n    animation: google.maps.Animation.DROP,\n    title: markers.name\n  });\n  var contentString = '<div class=\"info-window-content\"><h2>Light Bootstrap Dashboard PRO React</h2>' + \"<p>A premium Admin for React-Bootstrap, Bootstrap, React, and React Hooks.</p></div>\";\n  var infowindow = new google.maps.InfoWindow({\n    content: contentString\n  });\n  google.maps.event.addListener(marker, \"click\", function () {\n    infowindow.open(map, marker);\n  }); // }, []);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"600px\"\n      },\n      className: \"map-canvas\",\n      id: \"map-canvas\",\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(MapWrapper, \"jA+bSBj/8F8L0AZaDKXFGAlLdQY=\");\n\n_c = MapWrapper;\n\nvar Maps = function Maps() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"shadow border-0\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"\",\n              children: \"Qevla Admin Map Monitor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(MapWrapper, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_c2 = Maps;\nexport default Maps;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapWrapper\");\n$RefreshReg$(_c2, \"Maps\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","InfoWindow","Marker","Header","endpoints","Card","Container","Row","MapWrapper","mapRef","useRef","drivers","setDrivers","markers","fetchUsers","fetch","getDrivers","fullResponse","json","responseJson","users","forEach","user","marker","push","id","address","lat","name","position","console","log","google","window","map","current","lng","myLatlng","maps","LatLng","mapOptions","zoom","center","scrollwheel","zoomControl","styles","featureType","elementType","stylers","color","visibility","saturation","lightness","Map","animation","Animation","DROP","title","contentString","infowindow","content","event","addListener","open","height","Maps"],"sources":["C:/Users/123/Documents/Easynet/argon-dashboard/src/views/Maps.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GoogleMap, InfoWindow, Marker } from \"@react-google-maps/api\";\n// core components\nimport Header from \"components/Headers/Header.js\";\nimport { endpoints } from \"../api-endpoints\";\n\n// reactstrap components\nimport { Card, Container, Row } from \"reactstrap\";\n\n// core components\n\nconst MapWrapper = () => {\n  const mapRef = React.useRef(null);\n    const [drivers, setDrivers] = useState([]);\n    const markers = [];\n\n  useEffect(() => {\n    async function fetchUsers() {\n      const fullResponse = await fetch(endpoints.getDrivers);\n      const responseJson = await fullResponse.json();\n      setDrivers(responseJson.users);\n    }\n\n    fetchUsers();\n  }, []);\n\n  drivers.forEach((user) => {\n    marker.push({\n      id: user.address.lat,\n      name: \"Qevla Driver new one\",\n      position: user.address,\n    });\n  });\n\n  console.log(\n    \"Created drivers>>>>>>> from headers from map markers used\",\n    markers\n  );\n\n  // React.useEffect(() => {\n    let google = window.google;\n    let map = mapRef.current;\n    let lat = \"40.748817\";\n    let lng = \"-73.985428\";\n    const myLatlng = new google.maps.LatLng(lat, lng);\n    const mapOptions = {\n      zoom: 12,\n      center: myLatlng,\n      scrollwheel: false,\n      zoomControl: true,\n      styles: [\n        {\n          featureType: \"administrative\",\n          elementType: \"labels.text.fill\",\n          stylers: [{ color: \"#444444\" }],\n        },\n        {\n          featureType: \"landscape\",\n          elementType: \"all\",\n          stylers: [{ color: \"#f2f2f2\" }],\n        },\n        {\n          featureType: \"poi\",\n          elementType: \"all\",\n          stylers: [{ visibility: \"off\" }],\n        },\n        {\n          featureType: \"road\",\n          elementType: \"all\",\n          stylers: [{ saturation: -100 }, { lightness: 45 }],\n        },\n        {\n          featureType: \"road.highway\",\n          elementType: \"all\",\n          stylers: [{ visibility: \"simplified\" }],\n        },\n        {\n          featureType: \"road.arterial\",\n          elementType: \"labels.icon\",\n          stylers: [{ visibility: \"off\" }],\n        },\n        {\n          featureType: \"transit\",\n          elementType: \"all\",\n          stylers: [{ visibility: \"off\" }],\n        },\n        {\n          featureType: \"water\",\n          elementType: \"all\",\n          stylers: [{ color: \"#5e72e4\" }, { visibility: \"on\" }],\n        },\n      ],\n    };\n\n// async function fetchUsers() {\n//   const fullResponse = await fetch(endpoints.getDrivers);\n//   const responseJson = await fullResponse.json();\n//   setDrivers(responseJson.users);\n// }\n// fetchUsers();\n\n//     const markers = [];\n\n\n//  drivers.forEach((user) => {\n//    marker.push({\n//      id: user.address.lat,\n//      name: \"Qevla Driver new one\",\n//      position: user.address,\n//    });\n//  });\n\n\n    map = new google.maps.Map(map, mapOptions);\n\n    const marker = new google.maps.Marker({\n      position: markers.address,\n      map: map,\n      animation: google.maps.Animation.DROP,\n      title: markers.name,\n    });\n\n    const contentString =\n      '<div class=\"info-window-content\"><h2>Light Bootstrap Dashboard PRO React</h2>' +\n      \"<p>A premium Admin for React-Bootstrap, Bootstrap, React, and React Hooks.</p></div>\";\n\n    const infowindow = new google.maps.InfoWindow({\n      content: contentString,\n    });\n\n    google.maps.event.addListener(marker, \"click\", function () {\n      infowindow.open(map, marker);\n    });\n  // }, []);\n  return (\n    <>\n      <div\n        style={{ height: `600px` }}\n        className=\"map-canvas\"\n        id=\"map-canvas\"\n        ref={mapRef}\n      ></div>\n    </>\n  );\n};\n\nconst Maps = () => {\n  return (\n    <>\n      <Header />\n      {/* Page content */}\n      <Container className=\"mt--7\" fluid>\n        <Row>\n          <div className=\"col\">\n            <Card className=\"shadow border-0\">\n              <h2 className=\"\">Qevla Admin Map Monitor</h2>\n              <MapWrapper />\n            </Card>\n          </div>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Maps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}